import { integer, float, Array } from "../../../bluescript/modules/base";
import { assert, abs, fabs, sqrt } from "../../../bluescript/modules/esp32/bluescript/utils";

const RESULT = 8191;

class TowersDisk {
    size: integer;
    next: TowersDisk;

    constructor(size: integer) {
        this.size = size;
        this.next = this;
    }
}

let sentinelPile = new TowersDisk(-1);
let piles = new Array<TowersDisk>(3, sentinelPile);
let movesDone = 0;



function pushDisk(disk: TowersDisk, pile: integer) {
    const top:TowersDisk = piles[pile];
    if (top.size != -1 && disk.size >= top.size) {
        assert(false);
    }
    disk.next = top;
    piles[pile] = disk;
}

function popDiskFrom(pile: integer) {
    const top:TowersDisk = piles[pile];
    if (top.size === -1) {
        assert(false);
    }
    piles[pile] = top.next;
    top.next = sentinelPile;
    return top;
}

function moveTopDisk(fromPile: integer, toPile: integer) {
    pushDisk(popDiskFrom(fromPile), toPile);
    movesDone += 1;
}

function buildTowerAt(pile: integer, disks: integer) {
    for (let i = disks; i >= 0; i--) {
        pushDisk(new TowersDisk(i), pile);
    }
}

function moveDisks(disks: integer, fromPile: integer, toPile: integer) {
    if (disks === 1) {
        moveTopDisk(fromPile, toPile);
    } else {
        const otherPile = (3 - fromPile) - toPile;
        moveDisks(disks - 1, fromPile, otherPile);
        moveTopDisk(fromPile, toPile);
        moveDisks(disks - 1, otherPile, toPile);
    }
}


function verifyResult(result: integer) {
    return result === RESULT;
}


function benchmark(cycle: integer) {
    for (let i = 0; i < cycle; i++) {
        sentinelPile = new TowersDisk(-1);
        piles = new Array<TowersDisk>(3, sentinelPile);
        movesDone = 0;
        buildTowerAt(0, 13);
        moveDisks(13, 0, 1);
        assert(verifyResult(movesDone));
    }
}


benchmark(3);

