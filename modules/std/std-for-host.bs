import type { integer, float } from "../../bs-utils";

code`
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include "assert.h"
`

export const randInt = (min: integer, max: integer):integer => {
    const result = 0;
    code`_result = rand() % (_max - _min + 1) + _min`;
    return result;
}

export function assert(test: boolean) {
    code`assert(_test)`;
}

export function abs(i:integer):integer {
    const result = 0;
    code`_result = abs(_i)`;
    return result;
}

export function fabs(f:float):float {
    const result = 0;
    code`_result = fabsf(_f)`;
    return result;
}

export function sqrt(f:float):float {
    const result = 0;
    code`_result = sqrt(_f)`;
    return result;
}

export function cos(f: float):float {
    let result = 0.0;
    code`_result = cos(_f)`;
    return result;
}

export function sin(f: float):float {
    let result = 0.0;
    code`_result = sin(_f)`;
    return result;
}

export function anyArrayCopy(src: any[], dest: any[]) {
    const srcLength = src.length;
    const destLength = dest.length;
    if (srcLength <= destLength) {
        code`
      pointer_t src_vector_p = value_to_ptr(value_to_ptr(func_rootset.values[0])->body[1]);
      pointer_t dest_vector_p = value_to_ptr(value_to_ptr(func_rootset.values[1])->body[1]);
      value_t* src_buffer = &src_vector_p->body[1];
      value_t* dest_buffer = &dest_vector_p->body[1];
      memcpy(dest_buffer, src_buffer, _srcLength * sizeof(value_t));
        `
    } else {
        code`runtime_error("** array copy error: the length of src array must be equal or smaller than the length of dest array.")`;
    }
}